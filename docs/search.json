[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 MultRegCMP authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mauro Florez. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Florez M (2024). MultRegCMP: MCMC estimation Multivariate Conway-Maxwell-Poisson Regression Model. R package version 0.1.0.","code":"@Manual{,   title = {MultRegCMP: MCMC estimation for a Multivariate Conway-Maxwell-Poisson Regression Model},   author = {Mauro Florez},   year = {2024},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"multregcmp","dir":"","previous_headings":"","what":"MCMC estimation for a Multivariate Conway-Maxwell-Poisson Regression Model","title":"MCMC estimation for a Multivariate Conway-Maxwell-Poisson Regression Model","text":"MultRegCMP R package designed fit Bayesian Regression Model multivariate count data. assume data distributed according Conway-Maxwell-Poisson distribution, response variable, can associate different covariates. model allows us account correlations counts. can find details model paper published.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"MCMC estimation for a Multivariate Conway-Maxwell-Poisson Regression Model","text":"can install development version MultRegCMP like :","code":"devtools::install_github(\"mauroflorez/MultRegCMP\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"MCMC estimation for a Multivariate Conway-Maxwell-Poisson Regression Model","text":"can see can use package functions function com_sampler(mu, nu) allow us sample data CMP location parameter mu shape parameter nu. ndraws = TRUE returns number draws needed sample n data. Functions log_cmp calculate log-likelihood unnormalized component CMP, whilea llk_cmp calculate approximate log-likelihood distribution suggested Benson Friel (2021). Finally, implement model use main function mcmc_cmp. function requires two important componentes; X covariates information, object list, every element list covariance matrix every response. hand, y matrix (nxJ) containing J response variables n observations. can see example fit model, require number draws S, number samples burn nburn parameters MCMC - Exchange Algorithm steps. can see estimations model see trace plots   shape parameters   Additionally DIC_cmp allows calculate approximation Deviance Information Criterion fitted model response.","code":"library(MultRegCMP) ## basic example code com_sampler(4, 5) #> [1] 5  com_sampler(1, 0.5, 10, ndraws = TRUE) #> $samples #>  [1] 5 0 0 0 3 0 1 0 0 0 #>  #> $draws #> [1] 24 #>  #> $log_Bf #> [1] 1.591368 llk_cmp(y = 2, mu = 2, nu = 1.5) #>     draws  #> -1.145585 n = 50; J = 2 X = list(matrix(rnorm(3*n), ncol = 3), matrix(rnorm(3*n), ncol = 3)) beta <- list(c(1,0.1, 1), c(0, 0.5, -0.5)) mu <- exp(prod_list(X, beta)) y = matrix(rpois(n = length(mu), lambda = mu), nrow = n) fit <- mcmc_cmp(y, X, S = 50000, nburn = 1000, scale_cov_b = 0.8, scale_cov_beta = 0.04, scale_cov_gamma = 0.06, progress = \"bar\") fit$estimation_beta #> [[1]] #> [1]  0.44598406 -0.03606053  0.34851721 #>  #> [[2]] #> [1]  0.09762769  0.16574753 -0.29706902 fit$estimation_gamma #> [[1]] #> [1] -0.140406008  0.006613623 -0.118505876 #>  #> [[2]] #> [1] -0.009280741 -0.067052429  0.148898941 plot.ts(fit$posterior_beta[[1]], main = \"Traceplot - Exchange Algorithm\", ylab = \"Beta_1\") plot.ts(fit$posterior_beta[[2]], main = \"Traceplot - Exchange Algorithm\", ylab = \"Beta_2\") plot.ts(fit$posterior_gamma[[1]], main = \"Traceplot - Exchange Algorithm\", ylab = \"Gamma_1\") plot.ts(fit$posterior_gamma[[2]], main = \"Traceplot - Exchange Algorithm\", ylab = \"Gamma_2\") DIC_cmp(fit, X, y) #> [1] 152.3600 137.4799"},{"path":"/reference/DIC_cmp.html","id":null,"dir":"Reference","previous_headings":"","what":"DIC of the regression model — DIC_cmp","title":"DIC of the regression model — DIC_cmp","text":"DIC regression model","code":""},{"path":"/reference/DIC_cmp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DIC of the regression model — DIC_cmp","text":"","code":"DIC_cmp(fit, X, y, S = 100)"},{"path":"/reference/DIC_cmp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DIC of the regression model — DIC_cmp","text":"fit object mcmc_cmp_mh X Covariates list, element design matrix column y y Matrix observations S Number iterations used calculate DIC","code":""},{"path":"/reference/DIC_cmp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DIC of the regression model — DIC_cmp","text":"Approximated DIC","code":""},{"path":"/reference/MultRegCMP-package.html","id":null,"dir":"Reference","previous_headings":"","what":"MultRegCMP: MCMC estimation for a Multivariate Conway-Maxwell-Poisson Regression Model — MultRegCMP-package","title":"MultRegCMP: MCMC estimation for a Multivariate Conway-Maxwell-Poisson Regression Model — MultRegCMP-package","text":"MCMC Algorithm estimate parameters multivariate Conway-Maxwell-Poisson model correlated count data.","code":""},{"path":"/reference/com_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Rejection Sampler - COM-Poisson — com_sampler","title":"Rejection Sampler - COM-Poisson — com_sampler","text":"Sampler Conway-Maxwell-Poisson described Algorithm 2 - Benson & Friel (2021)","code":""},{"path":"/reference/com_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rejection Sampler - COM-Poisson — com_sampler","text":"","code":"com_sampler(mu, nu, n = 1, ndraws = FALSE)"},{"path":"/reference/com_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rejection Sampler - COM-Poisson — com_sampler","text":"mu Location parameter nu Shape parameter n Number draws (default = 1) ndraws Optional: Return number draws required generate n samples.","code":""},{"path":"/reference/com_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rejection Sampler - COM-Poisson — com_sampler","text":"list numeric ndraws = FALSE: sample Values sampled distribution drawsa Number draws required rejection sampler log_Bf Log boundary rejection sampler","code":""},{"path":"/reference/com_sampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rejection Sampler - COM-Poisson — com_sampler","text":"","code":"com_sampler(2, 0.2, n = 10, ndraws = TRUE) #> $samples #>  [1]  2  3  0 15  4  4  5  1 15  5 #>  #> $draws #> [1] 17 #>  #> $log_Bf #> [1] 2.464226 #>  com_sampler(1, 2) #> [1] 1"},{"path":"/reference/epl_20_21.html","id":null,"dir":"Reference","previous_headings":"","what":"Scores English Premier League Season 2020-2021 — epl_20_21","title":"Scores English Premier League Season 2020-2021 — epl_20_21","text":"data set scores games played season 2020-2021 English Premier League (EPL)","code":""},{"path":"/reference/epl_20_21.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scores English Premier League Season 2020-2021 — epl_20_21","text":"","code":"epl_20_21"},{"path":"/reference/epl_20_21.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scores English Premier League Season 2020-2021 — epl_20_21","text":"data frame 380 rows 4 variables: HG Goals scored home team. AG Goals scored away team. HomeTeam Home team. AwayTeam Away team.","code":""},{"path":"/reference/epl_20_21.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Scores English Premier League Season 2020-2021 — epl_20_21","text":"<https://www.football-data.co.uk>","code":""},{"path":"/reference/llk_cmp.html","id":null,"dir":"Reference","previous_headings":"","what":"Log likelihood of the Conway-Maxwell-Poisson Distribution — llk_cmp","title":"Log likelihood of the Conway-Maxwell-Poisson Distribution — llk_cmp","text":"function calculates log likelihood distribution described Benson Friel (2021)","code":""},{"path":"/reference/llk_cmp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log likelihood of the Conway-Maxwell-Poisson Distribution — llk_cmp","text":"","code":"llk_cmp(y, mu, nu, r = 1000)"},{"path":"/reference/llk_cmp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log likelihood of the Conway-Maxwell-Poisson Distribution — llk_cmp","text":"y Count value mu Location parameter nu Shape parameter r Number acceptances","code":""},{"path":"/reference/llk_cmp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log likelihood of the Conway-Maxwell-Poisson Distribution — llk_cmp","text":"Estimation log likelihood distribution","code":""},{"path":"/reference/llk_cmp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log likelihood of the Conway-Maxwell-Poisson Distribution — llk_cmp","text":"","code":"llk_cmp(10, 5, 2) #>     draws  #> -5.958406"},{"path":"/reference/log_cmp.html","id":null,"dir":"Reference","previous_headings":"","what":"Log density of the normalized component of the Conway-Maxwell-Poisson — log_cmp","title":"Log density of the normalized component of the Conway-Maxwell-Poisson — log_cmp","text":"Log density normalized component Conway-Maxwell-Poisson","code":""},{"path":"/reference/log_cmp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log density of the normalized component of the Conway-Maxwell-Poisson — log_cmp","text":"","code":"log_cmp(y, mu, nu)"},{"path":"/reference/log_cmp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log density of the normalized component of the Conway-Maxwell-Poisson — log_cmp","text":"y Value mu Location parameter nu Shape parameter","code":""},{"path":"/reference/log_cmp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log density of the normalized component of the Conway-Maxwell-Poisson — log_cmp","text":"log normalized component","code":""},{"path":"/reference/mcmc_cmp.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC Algorithm for Conway-Maxwell-Poisson Regression Model for Multivariate Correlated Count Data — mcmc_cmp","title":"MCMC Algorithm for Conway-Maxwell-Poisson Regression Model for Multivariate Correlated Count Data — mcmc_cmp","text":"MCMC Algorithm estimate parameters regression model multivariate correlated count data","code":""},{"path":"/reference/mcmc_cmp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCMC Algorithm for Conway-Maxwell-Poisson Regression Model for Multivariate Correlated Count Data — mcmc_cmp","text":"","code":"mcmc_cmp(   y,   X,   S = 10000,   nburn = 5000,   initial_beta,   initial_gamma,   initial_b,   prior_mean_beta,   prior_var_beta,   prior_mean_gamma,   prior_var_gamma,   v_0,   R_0,   intercept = FALSE,   scale_b,   scale_beta,   scale_gamma,   scale_cov_b,   scale_cov_beta,   scale_cov_gamma,   inc_burn = FALSE,   re_chain = TRUE,   progress = \"acc_rates\",   way = 2,   random_seed,   ... )"},{"path":"/reference/mcmc_cmp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCMC Algorithm for Conway-Maxwell-Poisson Regression Model for Multivariate Correlated Count Data — mcmc_cmp","text":"y Matrix observations X Covariates list, element design matrix column y S Number MCMC samples drawn nburn Number MCMC samples burn-initial_beta List initial value \\(beta\\) response initial_gamma List initial value \\(gamma\\) response initial_b Initital value \\(b\\). prior_mean_beta Prior mean \\(beta\\). (Default zero vector) prior_var_beta Prior covariance matrix \\(beta\\) (Default \\(\\)) prior_mean_gamma Prior mean \\(beta\\). (Default zero vector) prior_var_gamma Prior covariance matrix \\(gamma\\) (Default \\(\\)) v_0 Prior degrees freedom random effects R_0 Prior covariance matrix random effects intercept Logical value indicating whether include intercept scale_b Covariance matrix RW proposals random effects (Default \\(\\)) scale_beta List initial values scale matrices \\(beta\\) (Default \\(\\)) scale_gamma List initial values scale matrices \\(gamma\\) (Default \\(\\)) scale_cov_b Scale parameter RW random effects. (Default \\(2.4/sqrt(2)\\)) scale_cov_beta Scale parameter covariance proposals. scale_cov_gamma Scale parameter covariance proposals. inc_burn logical: include burned samples return re_chain logical: posterior samples r.e include. False return just mean progress output algorithm: \"acc_rates\" update 10 interactions acceptance ratios, \"bar\" show bar progress way calculate MCMC updates, based Chib (2001) random_seed Random seed ... Additional parameters MCMC algorithm","code":""},{"path":"/reference/mcmc_cmp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCMC Algorithm for Conway-Maxwell-Poisson Regression Model for Multivariate Correlated Count Data — mcmc_cmp","text":"list: posterior_b List posterior values random effects estimation_beta Estimation beta parameters posterior_beta List posterior values beta estimation_gamma Estimation gamma parameters posterior_gamma List posterior values gamma posterior_D Values covariance matrix D accept_rate_b Acceptance rate Random Effects accept_rate_beta Acceptance rate beta accept_rate_gamma Acceptance rate gamma scale_beta Estimated Scale matrix beta parameters scale_gamma Estimated Scale matrix gamma parameters","code":""},{"path":"/reference/mcmc_cmp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MCMC Algorithm for Conway-Maxwell-Poisson Regression Model for Multivariate Correlated Count Data — mcmc_cmp","text":"","code":"if (FALSE) {   n = 50; J = 2   X = list(matrix(rnorm(3*n), ncol = 3), matrix(rnorm(3*n), ncol = 3))   beta <- list(c(1,0.1, 1), c(0, 0.5, -0.5))   mu <- exp(prod_list(X, beta))   y = matrix(rpois(n = length(mu), lambda = mu), nrow = n)   fit <- mcmc_cmp(y, X, S = 10000, nburn = 1000, scale_cov_b = 0.8,   scale_cov_beta = 0.04, scale_cov_gamma = 0.06) }"},{"path":"/reference/prod_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Product of lists between matrices — prod_list","title":"Product of lists between matrices — prod_list","text":"Product lists matrices","code":""},{"path":"/reference/prod_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Product of lists between matrices — prod_list","text":"","code":"prod_list(X, beta)"},{"path":"/reference/prod_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Product of lists between matrices — prod_list","text":"X Data beta Parameters","code":""},{"path":"/reference/prod_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Product of lists between matrices — prod_list","text":"list products element-wise","code":""}]
